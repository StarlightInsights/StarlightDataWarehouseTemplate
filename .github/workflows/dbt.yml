name: dbt.yml

permissions:
  pages: write
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      commands:
        required: true
        description: |
          The commands that should run.
          E.g., `dbt deps`, `dbt run --target github`, `dbt build --target github`.
        type: string
      project-folder:
        required: false
        description: The folder that holds the dbt project.
        default: starlight
        type: string
      database:
        required: false
        description: The analytical database.
        default: starlight
        type: string
      schema:
        required: false
        description: The production schema.
        default: datawarehouse
        type: string
      with-dbt-docs:
        required: false
        default: false
        type: boolean
        description: Will create DBT docs and upload to GitHub Pages.
      with-initial-manifest:
        required: false
        default: false
        type: boolean
        description: |
          Indicates whether to save the `manifest.json` file from the initial commit of the branch.

          This is useful for pull requests when you want to limit `dbt run` and `dbt test` to only the files that have changed.

          E.g., `run --select +state:modified --state ./` and `test --select +state:modified --state ./`.
    secrets:
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE:
        required: true
        description: The passphrase for the Snowflake private key.
      SNOWFLAKE_PRIVATE_KEY:
        required: true
        description: The Snowflake private key.

jobs:
  check-cache:
    name: Check Cache
    if: ${{ inputs.with-initial-manifest == true }}
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.check-cache.outputs.cache-hit }}

    steps:
      - name: Check cache for manifest.json
        id: check-cache
        uses: actions/cache@v4
        with:
          path: ${{ inputs.project-folder }}/target/manifest.json
          key: manifest-${{ github.event.pull_request.number }}
          restore-keys: |
            manifest-

  manifest:
    name: Save Initial Manifest
    needs: check-cache
    if: ${{ inputs.with-initial-manifest == true && needs.check-cache.outputs.cache-hit != 'true' }}
    uses: ./.github/workflows/dbt-save-manifest.yml
    with:
      project-folder: ${{ inputs.project-folder }}
      database: ${{ inputs.database }}
      schema: ${{ inputs.schema }}
    secrets:
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}

  dbt:
    name: Set up and Run DBT
    needs: [check-cache, manifest]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: ./.github/actions/setup-python

      - name: Install dbt-core and dbt-snowflake
        uses: ./.github/actions/install-python-dependencies
        with:
          dependencies: "dbt-core dbt-snowflake"

      - name: Copy profiles.yml
        run: sudo cp -r .dbt/ /home/runner/

      - name: Restore manifest from cache
        if: ${{ inputs.with-initial-manifest == true }}
        uses: actions/cache@v4
        with:
          path: ${{ inputs.project-folder }}/target/manifest.json
          key: manifest-${{ github.event.pull_request.number }}
          restore-keys: |
            manifest-

      - name: Move manifest to project folder
        if: ${{ inputs.with-initial-manifest == true }}
        run: |
          mv ${{ inputs.project-folder }}/target/manifest.json ${{ inputs.project-folder }}/manifest.json

      - name: Execute Provided Commands
        env:
          DATABASE: ${{ inputs.database }}
          SCHEMA: ${{ inputs.schema }}
          SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
        working-directory: ${{ inputs.project-folder }}
        run: |
          {
            ${{ inputs.commands }}
          } 2>&1 | tee dbt_output.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Get SQL from failing DBT Tests
        if: failure()
        uses: ./.github/actions/dbt/process-dbt-tests
        with:
          project-folder: ${{ inputs.project-folder }}

      - name: DBT Docs Generate
        if: ${{ inputs.with-dbt-docs == true }}
        env:
          DATABASE: ${{ inputs.database }}
          SCHEMA: ${{ inputs.schema }}
          SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
        working-directory: ${{ inputs.project-folder }}
        run: dbt docs generate --target github

      - name: DBT Docs Upload
        id: deployment
        if: ${{ inputs.with-dbt-docs == true }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.project-folder }}/target

  deploy-dbt-docs:
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: dbt
    if: ${{ always() }}
    steps:
      - name: Deploy DBT Docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

name: 'Process DBT Test Results'
description: 'Processes and formats DBT test results from output log'

inputs:
  project-folder:
    description: 'Path to the DBT project folder'
    required: true

runs:
  using: "composite"
  steps:
    - shell: bash
      working-directory: ${{ inputs.project-folder }}
      run: |
        if [ ! -f "dbt_output.log" ]; then
          echo "No test output file found"
          exit 0
        fi

        # Get number of errors from the "Done." line
        num_failed_tests=$(grep "Done." "dbt_output.log" | grep -o "ERROR=[0-9]*" | cut -d'=' -f2)

        if [ -z "$num_failed_tests" ] || [ "$num_failed_tests" -eq 0 ]; then
          echo "No failed tests found"
          exit 0
        fi

        echo "❌ Found $num_failed_tests failed DBT test(s)"
        echo ""

        while IFS= read -r line; do
          if [[ $line == *"compiled code at"* ]]; then
            # Extract SQL file path exactly as it appears in the log
            sql_path=$(echo "$line" | awk '{print $5}')
            test_name=$(basename "$sql_path" .sql)
            
            # Get the failure message
            failure_msg=$(grep -A 1 "Failure in test $test_name" "dbt_output.log" | tail -n 1)
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔍 Test Name: $test_name"
            echo "❗ Error: ${failure_msg#*Failure in test }"
            echo ""
            echo "📋 Generated SQL Query:"
            echo "──────────────────────"
            if [ -f "$sql_path" ]; then
              # Format and output SQL with proper indentation
              grep -v '^[[:space:]]*$' "$sql_path" | sed 's/^/    /'
            else
              echo "    SQL file not found at: $sql_path"
            fi
            echo ""
          fi
        done < "dbt_output.log"

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "💡 To fix these issues:"
        echo "  1. Review each failed test's SQL query"
        echo "  2. Check the data for violations of the test conditions"
        echo "  3. Either fix the data or adjust the test constraints as needed"
        echo ""